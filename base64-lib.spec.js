'use strict';

var Base64 = require('./base64-lib'),
  NotImplementedException = require('./exceptions/NotImplementedException.js'),
  InvalidParameterException = require('./exceptions/InvalidParameterException.js'),
  InvalidStateException = require('./exceptions/InvalidStateException.js');

/*
 * Base64 encodings generated by Base64 Online (www5.rptea.com/base64)
 * Use UTF-16 encoding when prompted.
 * Base64 encoding for the 2nd string was verified via base64-js library.
 */
const plainStrings = [
    'Foo Bar',
    'This string \n has newlines and \ttabs',
    'mañana',
    'Iñtërnâtiônàlizætiøn☃💩',
    'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞',
    '🇺🇸🇺🇸'
  ],
  base64Strings = [
    'RgBvAG8AIABCAGEAcgA=',
    'VABoAGkAcwAgAHMAdAByAGkAbgBnACAACgAgAGgAYQBzACAAbgBlAHcAbABpAG4AZQBzACAAYQBuAGQAIAAJAHQAYQBiAHMA',
    'bQBhAPEAYQBuAGEA',
    'SQDxAHQA6wByAG4A4gB0AGkA9ABuAOAAbABpAHoA5gB0AGkA+ABuAAMmPdip3A==',
    'WgBRA2sDQwNqAwIDawM9A08DNAMZAyQDHgNJA1oDLwMeAyADTQNBAGsDVwM0A2IDNQMcAzADVANMAGgDZwNpA1gDIANHABEDVwMOAwUDWwNBAzQDOwNIA00DVAM5A08AQgMMAwwDWAMoAzUDOQM7Ax0DMwMhAD8DCwNlA2UDAgNjAxADAQMBA14DXANWAywDMAMZAxcD',
    'PNj63TzY+N082PrdPNj43Q=='
  ]

describe('base64', function() {
  var b64 = new Base64();

  describe('encode', function() {
    it('should convert a string to base64 properly', function () {
      for (var i = 0 ; i < plainStrings.length ; i++) {
        expect(b64.encode(b64.mapStringToArray(plainStrings[i]))).toEqual(base64Strings[i]);
      }
    });

    xit('should convert a byte array to base64 properly', function () {
      throw new NotImplementedException();
    });
  });

  describe('decode', function() {
    xit('should convert base64 to a string properly', function () {
      for (var i = 0 ; i < base64Strings.length ; i++) {
        expect(b64.decode(base64Strings[i])).toEqual(plainStrings[i]);
      }
    });

    xit('should convert base64 to a byte array properly', function () {
      throw new NotImplementedException();
    });
  });
});